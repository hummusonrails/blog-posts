"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VectorSearch = exports.VectorQuery = exports.VectorQueryCombination = void 0;
const errors_1 = require("./errors");
/**
 * Specifies how multiple vector searches are combined.
 *
 * Uncommitted: This API is subject to change in the future.
 *
 * @category Full Text Search
 */
var VectorQueryCombination;
(function (VectorQueryCombination) {
    /**
     * Indicates that multiple vector queries should be combined with logical AND.
     */
    VectorQueryCombination["AND"] = "and";
    /**
     * Indicates that multiple vector queries should be combined with logical OR.
     */
    VectorQueryCombination["OR"] = "or";
})(VectorQueryCombination || (exports.VectorQueryCombination = VectorQueryCombination = {}));
/**
 * Represents a vector query.
 *
 * Uncommitted: This API is subject to change in the future.
 *
 * @category Full Text Search
 */
class VectorQuery {
    constructor(fieldName, vector) {
        this._fieldName = fieldName;
        if (!Array.isArray(vector) || vector.length == 0) {
            throw new errors_1.InvalidArgumentError(new Error('Provided vector must be an array and cannot be empty.'));
        }
        this._vector = vector;
    }
    /**
     * @internal
     */
    toJSON() {
        var _a;
        const output = {
            field: this._fieldName,
            vector: this._vector,
            k: (_a = this._numCandidates) !== null && _a !== void 0 ? _a : 3,
        };
        if (this._boost) {
            output['boost'] = this._boost;
        }
        return output;
    }
    /**
     * Adds boost option to vector query.
     *
     * Uncommitted: This API is subject to change in the future.
     *
     * @param boost A floating point value.
     */
    boost(boost) {
        this._boost = boost;
        return this;
    }
    /**
     * Adds numCandidates option to vector query. Value must be >= 1.
     *
     * Uncommitted: This API is subject to change in the future.
     *
     * @param numCandidates An integer value.
     */
    numCandidates(numCandidates) {
        if (numCandidates < 1) {
            throw new errors_1.InvalidArgumentError(new Error('Provided value for numCandidates must be >= 1.'));
        }
        this._numCandidates = numCandidates;
        return this;
    }
    /**
     * Creates a vector query.
     *
     * Uncommitted: This API is subject to change in the future.
     *
     * @param fieldName The name of the field in the JSON document that holds the vector.
     * @param vector List of floating point values that represent the vector.
     */
    static create(fieldName, vector) {
        return new VectorQuery(fieldName, vector);
    }
}
exports.VectorQuery = VectorQuery;
/**
 * Represents a vector search.
 *
 * Uncommitted: This API is subject to change in the future.
 *
 * @category Full Text Search
 */
class VectorSearch {
    constructor(queries, options) {
        if (!Array.isArray(queries) || queries.length == 0) {
            throw new errors_1.InvalidArgumentError(new Error('Provided queries must be an array and cannot be empty.'));
        }
        if (!queries.every((q) => q instanceof VectorQuery)) {
            throw new errors_1.InvalidArgumentError(new Error('All provided queries must be a VectorQuery.'));
        }
        this._queries = queries;
        this._options = options;
    }
    /**
     * @internal
     */
    get queries() {
        return this._queries;
    }
    /**
     * @internal
     */
    get options() {
        return this._options;
    }
    /**
     * Creates a vector search.
     *
     * Uncommitted: This API is subject to change in the future.
     *
     * @param query A vectory query that should be a part of the vector search.
     */
    static fromVectorQuery(query) {
        return new VectorSearch([query]);
    }
}
exports.VectorSearch = VectorSearch;
